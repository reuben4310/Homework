[{"C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\index.js":"1","C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\App.js":"2","C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\BlogDetails.js":"4","C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\Blogs.js":"5","C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\Posts.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":532,"mtime":1609964465132,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":648,"mtime":1609961177638,"results":"11","hashOfConfig":"8"},{"size":888,"mtime":1609961031476,"results":"12","hashOfConfig":"8"},{"size":1091,"mtime":1609962806777,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18weqrb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\index.js",[],["29","30"],"C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\App.js",[],"C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\BlogDetails.js",["31"],"\r\nimport React from 'react';\r\nimport './blogList.css';\r\n// import { } from 'react-router-dom';\r\n\r\nexport default  (props) => {\r\n  \r\n  const togglePost= () => {\r\n    console.log(\"toggle\")\r\n  }\r\n\r\n  \r\n  \r\n\r\n  return (\r\n  \r\n    <div className=\"blog\" onClick={togglePost}>\r\n   \r\n            <div className=\"title\">{props.blog.name}</div>\r\n            <div className=\"website\">{props.blog.website}</div>\r\n            <div className=\"company\">\r\n              <div>{props.blog.company.name}</div>\r\n              <div>{props.blog.company.catchPhrase}</div>\r\n              <div>{props.blog.company.bs}</div>\r\n            </div>\r\n          </div>)\r\n\r\n  }\r\n\r\n","C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\Blogs.js",["32"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport BlogDetails from './BlogDetails';\r\nimport './blogList.css';\r\n\r\nexport default () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        if (!response.ok) {\r\n          throw new Error(`${response.status}: ${response.statusText}`);\r\n        }\r\n        const users = await response.json();\r\n\r\n        setBlogs(users);\r\n\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })();\r\n  }, []);\r\n  const blogList = blogs.length ? blogs.map(r => {\r\n    return <li><Link to={`/${r.id}`}><BlogDetails blog={r} key={r.id} /></Link></li>\r\n    \r\n\r\n  }) : null\r\n  \r\n  return (\r\n    <ul>\r\n\r\n      {blogList}\r\n      \r\n\r\n    </ul>\r\n\r\n  )\r\n}\r\n","C:\\xampp\\htdocs\\Hw\\JS\\88\\my-blogs\\src\\Posts.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":6,"column":1,"nodeType":"39","endLine":28,"endColumn":4},{"ruleId":"37","severity":1,"message":"38","line":6,"column":1,"nodeType":"39","endLine":42,"endColumn":2},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]